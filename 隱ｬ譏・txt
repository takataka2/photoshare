- chattest.dbの構成は以前と同じ。
-> user_idは追加しなくても大丈夫でした。


- chat送信時のプログラムであるchatpost()を追加


- 写真共有アプリはユーザー名を基に管理、チャットアプリはユーザーIDを基に管理している。
　photoshareでは写真共有アプリをメインに全体を管理することにする。ユーザー名をユーザーIDに
　変換するプログラムを追加することで、２つのアプリを統合する。


- セッションについて
　セッションとは、アクセスの開始から終了までの一連の通信のことです。
　Webサイトのアクセス解析などの指標でもあるセッションは、サイトにアクセスしてから
　一定時間経過することで通信が終了し、これを「1セッション」としてカウントします。

　ようするに「taro」でログインしてからログアウトするまでの通信ということです。

　　写真共有アプリとチャットアプリもセッションを使っているのですが、
　　それぞれプログラムの中で別のキーワードを使っています。
　　　　写真共有アプリ： session['login'] = ユーザー名（テキスト）
　　　　チャットアプリ： session['user_id'] = ユーザーID（int）

　今回修正したプログラムでは写真共有アプリのsession['login']で統一しました。
　session['user_id'] となっていたところはすべて書き換えています。


- チャットアプリの関数はmy_idを使って制御する。そこで以下のようにユーザー名から
　my_idを求める処理を挿入した。

    user_name = session["login"]
    conn = sqlite3.connect('chattest.db')
    c = conn.cursor()
    c.execute(
        "select id from user where (name = ? )", (user_name,))
    my_id = c.fetchone()[0]


- c.fetchone()とc.fetchone()[0]の違いに注意。
　c.fetchone()はデータベースを操作した結果がタプルが取得できるが、
　fetchone()[0]は帰ってきたタプルの先頭の要素が取得できる

　例：
    c.fetchone() -> (2,1)
    c.fetchone()[0] -> 2
    c.fetchone()[1] -> 1


- チャットアプリのデータベースchattest.dbには写真共有アプリのユーザー、パスワードを
　最初から登録しています。

　登録用のプログラムを作りました。もしchattest.dbリセットしたいときは以下のように操作してください。
  1. chattest.dbを削除する。
  2. python maketable.pyを実行する。
  3. python addvalue_chattest.pyを実行する。


- 今後やること
　今後以下のことをやる必要があると思います。
　- cssを使って見た目を整える
　- プログラムをネットに公開する。
　- 必要なら機能を追加する。できればユーザーをブラウザから追加できるようにしたい。
　